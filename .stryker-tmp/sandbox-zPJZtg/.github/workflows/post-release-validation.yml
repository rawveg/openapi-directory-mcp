name: Post-Release Validation

on:
  workflow_run:
    workflows: ["Release & NPM Publish"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: read
  issues: write
  actions: read  # For workflow_run access

jobs:
  wait-for-propagation:
    name: Wait for Registry Propagation
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
      
    steps:
      - name: Extract version from workflow
        id: extract-version
        run: |
          # Extract version from the tag that triggered the release workflow
          echo "Extracting version from completed release workflow..."
          
          # Get workflow run details including the triggering ref
          WORKFLOW_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}")
          
          # First try: Extract from head_commit message if it contains version info
          COMMIT_MESSAGE=$(echo "$WORKFLOW_DATA" | jq -r '.head_commit.message // empty')
          if [[ "$COMMIT_MESSAGE" =~ Release[[:space:]]+v([0-9]+\.[0-9]+\.[0-9]+.*) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "üì¶ Extracted from commit message: $VERSION"
            exit 0
          fi
          
          # Second try: Get the ref (should be the tag for tag-triggered workflows)
          HEAD_REF=$(echo "$WORKFLOW_DATA" | jq -r '.head_branch // empty')
          if [[ "$HEAD_REF" =~ ^v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "üì¶ Extracted from head_branch: $VERSION"
            exit 0
          fi
          
          # Third try: Check if head_sha corresponds to a tag
          HEAD_SHA=$(echo "$WORKFLOW_DATA" | jq -r '.head_sha // empty')
          if [ -n "$HEAD_SHA" ]; then
            TAG_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/git/refs/tags" \
              | jq -r --arg sha "$HEAD_SHA" '.[] | select(.object.sha == $sha) | .ref' | head -1)
            
            if [[ "$TAG_DATA" =~ refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*)$ ]]; then
              VERSION="${BASH_REMATCH[1]}"
              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "üì¶ Extracted from tag ref: $VERSION"
              exit 0
            fi
          fi
          
          # Fallback: Get latest release
          echo "‚ö†Ô∏è  Could not extract version from workflow, falling back to latest release"
          VERSION=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
            | jq -r '.tag_name // empty' | sed 's/^v//')
          
          if [ -n "$VERSION" ] && [ "$VERSION" != "null" ]; then
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "üì¶ Fallback to latest release: $VERSION"
          else
            echo "‚ùå Could not determine version"
            exit 1
          fi
          
      - name: Wait for registry propagation
        run: |
          echo "‚è±Ô∏è  Waiting 15 minutes for NPM registry propagation..."
          echo "üïê Start time: $(date)"
          sleep 900  # 15 minutes
          echo "üïë Wait complete: $(date)"

  validate-package-availability:
    name: Validate Package Availability
    runs-on: ubuntu-latest
    needs: wait-for-propagation
    
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Test package availability
        id: availability-test
        run: |
          echo "üîç Testing package availability on NPM registry with retry logic..."
          VERSION="${{ needs.wait-for-propagation.outputs.version }}"
          
          if [ -z "$VERSION" ]; then
            echo "‚ùå Could not determine version to test"
            exit 1
          fi
          
          echo "üì¶ Testing: openapi-directory-mcp@$VERSION"
          
          # Test npm view command with retry logic
          for i in {1..3}; do
            echo "üîÑ Attempt $i of 3..."
            
            if npm view "openapi-directory-mcp@$VERSION" version; then
              echo "‚úÖ Package version found on registry (attempt $i)"
              echo "package_found=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            if [ $i -lt 3 ]; then
              echo "‚è≥ Attempt $i failed, waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          echo "‚ùå Package version not found on registry after 3 attempts"
          echo "package_found=false" >> $GITHUB_OUTPUT
          exit 1
          
      - name: Test package installation
        run: |
          echo "üß™ Testing package installation with retry logic..."
          VERSION="${{ needs.wait-for-propagation.outputs.version }}"
          
          # Create clean test environment
          mkdir npm-install-test
          cd npm-install-test
          npm init -y
          
          # Install with retry logic
          for i in {1..3}; do
            echo "üîÑ Installation attempt $i of 3..."
            echo "üì• Installing openapi-directory-mcp@$VERSION..."
            
            if npm install "openapi-directory-mcp@$VERSION"; then
              echo "‚úÖ Package installation successful (attempt $i)"
              exit 0
            fi
            
            if [ $i -lt 3 ]; then
              echo "‚è≥ Installation attempt $i failed, waiting 30 seconds before retry..."
              # Clean up for next attempt
              rm -rf node_modules package-lock.json 2>/dev/null || true
              sleep 30
            fi
          done
          
          echo "‚ùå Package installation failed after 3 attempts"
          exit 1
          
      - name: Test CLI functionality
        run: |
          echo "üîç Testing CLI functionality post-installation..."
          cd npm-install-test
          
          # Test CLI startup
          if timeout 5s npx openapi-directory-mcp --help; then
            echo "‚úÖ CLI help command successful"
          else
            echo "‚úÖ CLI started successfully (expected timeout for MCP server)"
          fi
          
          # Test CLI executable
          if which openapi-directory-mcp >/dev/null 2>&1 || npx openapi-directory-mcp --version >/dev/null 2>&1; then
            echo "‚úÖ CLI executable accessible"
          else
            echo "‚ö†Ô∏è  CLI executable test inconclusive"
          fi
          
      - name: Validate package metadata
        run: |
          echo "üìã Validating package metadata..."
          VERSION="${{ needs.wait-for-propagation.outputs.version }}"
          
          # Get package info
          PACKAGE_INFO=$(npm view "openapi-directory-mcp@$VERSION" --json)
          
          # Extract key fields
          PUBLISHED_VERSION=$(echo "$PACKAGE_INFO" | jq -r '.version')
          DESCRIPTION=$(echo "$PACKAGE_INFO" | jq -r '.description')
          AUTHOR=$(echo "$PACKAGE_INFO" | jq -r '.author')
          LICENSE=$(echo "$PACKAGE_INFO" | jq -r '.license')
          
          echo "üì¶ Published Version: $PUBLISHED_VERSION"
          echo "üìù Description: $DESCRIPTION"
          echo "üë§ Author: $AUTHOR"
          echo "‚öñÔ∏è  License: $LICENSE"
          
          # Validate expected values
          if [ "$PUBLISHED_VERSION" = "$VERSION" ]; then
            echo "‚úÖ Version matches expected: $VERSION"
          else
            echo "‚ùå Version mismatch: expected $VERSION, got $PUBLISHED_VERSION"
            exit 1
          fi
          
          if [ "$LICENSE" = "MIT" ]; then
            echo "‚úÖ License correct: MIT"
          else
            echo "‚ö†Ô∏è  License unexpected: $LICENSE"
          fi

  post-validation-summary:
    name: Post-Validation Summary
    runs-on: ubuntu-latest
    needs: [wait-for-propagation, validate-package-availability]
    if: always()
    
    steps:
      - name: Generate validation report
        run: |
          echo "üìä Post-Release Validation Summary"
          echo "=================================="
          echo "üì¶ Version: ${{ needs.wait-for-propagation.outputs.version }}"
          echo "‚è±Ô∏è  Validation Time: $(date)"
          echo ""
          
          if [ "${{ needs.validate-package-availability.result }}" = "success" ]; then
            echo "‚úÖ Package Availability: PASSED"
            echo "‚úÖ Installation Test: PASSED" 
            echo "‚úÖ CLI Functionality: PASSED"
            echo "‚úÖ Metadata Validation: PASSED"
            echo ""
            echo "üéâ All post-release validations successful!"
            echo "üì¶ Package is fully available and functional on NPM registry"
          else
            echo "‚ùå Package Availability: FAILED"
            echo ""
            echo "‚ö†Ô∏è  Post-release validation detected issues"
            echo "üîç Check the logs above for details"
            echo "üìß Consider investigating registry propagation delays"
          fi
          
      - name: Create issue on validation failure
        if: ${{ needs.validate-package-availability.result != 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.wait-for-propagation.outputs.version }}';
            const issueTitle = `Post-Release Validation Failed for v${version}`;
            const issueBody = `## Post-Release Validation Failure
            
            **Version:** v${version}
            **Validation Time:** ${new Date().toISOString()}
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ### Issue
            The automated post-release validation failed for version ${version}. This could indicate:
            
            - Registry propagation delays (>15 minutes)
            - Package publication issues
            - Registry connectivity problems
            - Metadata inconsistencies
            
            ### Next Steps
            1. **Manual Verification:** Check https://www.npmjs.com/package/openapi-directory-mcp/v/${version}
            2. **Registry Status:** Verify NPM registry status at https://status.npmjs.org/
            3. **Installation Test:** Try manual installation: \`npm install -g openapi-directory-mcp@${version}\`
            4. **Timing:** If this is a timing issue, the package may be available now
            
            ### Auto-Resolution
            This issue will be automatically closed if:
            - The package becomes available and installable
            - A subsequent release validation succeeds
            - Manual verification confirms the package is working
            
            ---
            *This issue was automatically created by the Post-Release Validation workflow.*`;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: ['release', 'validation-failure', 'automated']
            });