name: CI

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Lint code
        run: npm run lint
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Check formatting
        run: npx prettier --check "src/**/*.ts" "tests/**/*.ts"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Run unit tests
        run: npm test -- --testPathPattern="tests/unit" --coverage
        
      - name: Upload coverage to Codecov
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-node-${{ matrix.node-version }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Run integration tests
        run: npm test -- --testPathPattern="tests/integration"
        env:
          RUN_INTEGRATION_TESTS: true

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Run performance tests
        run: npm test -- --testPathPattern="tests/performance"
        
      - name: Store performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: performance-results.json
          retention-days: 30

  plugin-architecture-validation:
    name: Plugin Architecture Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Validate plugin discovery
        run: |
          echo "üîç Testing plugin auto-discovery..."
          node -e "
            import('./dist/prompts/loader.js').then(async m => {
              const loader = new m.PromptLoader();
              const prompts = await loader.loadAllPrompts();
              console.log('‚úÖ Loaded', prompts.length, 'prompts');
              if (prompts.length === 0) process.exit(1);
            });
          "
          
          node -e "
            import('./dist/tools/loader.js').then(async m => {
              const loader = new m.ToolLoader();
              const tools = await loader.loadAllTools();
              console.log('‚úÖ Loaded', tools.length, 'tools');
              if (tools.length === 0) process.exit(1);
            });
          "
          
      - name: Validate plugin structure
        run: |
          echo "üîç Validating plugin structure..."
          
          # Check that all prompt files export required structure
          find src/prompts -name "*.ts" -not -path "*/types.ts" -not -path "*/loader.ts" -not -path "*/registry.ts" -not -path "*/handler.ts" -not -path "*/templates.ts" | while read file; do
            if ! grep -q "export const prompt" "$file"; then
              echo "‚ùå $file missing 'export const prompt'"
              exit 1
            fi
          done
          
          # Check that all tool files export required structure
          find src/tools -name "*.ts" -not -path "*/types.ts" -not -path "*/loader.ts" -not -path "*/registry.ts" -not -path "*/handler.ts" -not -path "*/generator.ts" | while read file; do
            if ! grep -q "export const tool" "$file"; then
              echo "‚ùå $file missing 'export const tool'"
              exit 1
            fi
          done
          
          echo "‚úÖ All plugin files have correct structure"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Build for CodeQL
        run: npm run build
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Clean build
        run: |
          rm -rf dist
          npm run build
          
      - name: Verify build artifacts
        run: |
          echo "üîç Verifying build artifacts..."
          
          # Check that main entry point exists
          if [ ! -f "dist/index.js" ]; then
            echo "‚ùå Main entry point dist/index.js not found"
            exit 1
          fi
          
          # Check that CLI binary is executable
          if [ ! -x "dist/index.js" ]; then
            echo "‚ùå CLI binary dist/index.js is not executable"
            exit 1
          fi
          
          # Check that all TypeScript files were compiled
          src_files=$(find src -name "*.ts" | wc -l)
          dist_files=$(find dist -name "*.js" | wc -l)
          
          echo "üìä Source files: $src_files, Compiled files: $dist_files"
          
          if [ "$dist_files" -lt "$src_files" ]; then
            echo "‚ùå Not all TypeScript files were compiled"
            exit 1
          fi
          
          echo "‚úÖ Build verification passed"
          
      - name: Test package creation
        run: |
          npm pack
          echo "‚úÖ Package creation successful"
          
      - name: Test CLI functionality
        run: |
          echo "üîç Testing CLI functionality..."
          node dist/index.js --help || echo "CLI help command executed"
          echo "‚úÖ CLI basic functionality verified"

  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Generate coverage report
        run: npm run test:coverage
        
      - name: Coverage report comment
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  all-checks:
    name: All Checks Complete
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, performance-tests, plugin-architecture-validation, security-scan, build-verification]
    if: always()
    
    steps:
      - name: Check all jobs
        run: |
          echo "üîç Checking job results..."
          
          if [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "‚ùå Code quality checks failed"
            exit 1
          fi
          
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "‚ùå Unit tests failed"
            exit 1
          fi
          
          if [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "‚ùå Integration tests failed"
            exit 1
          fi
          
          if [ "${{ needs.performance-tests.result }}" != "success" ]; then
            echo "‚ùå Performance tests failed"
            exit 1
          fi
          
          if [ "${{ needs.plugin-architecture-validation.result }}" != "success" ]; then
            echo "‚ùå Plugin architecture validation failed"
            exit 1
          fi
          
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "‚ùå Security scan failed"
            exit 1
          fi
          
          if [ "${{ needs.build-verification.result }}" != "success" ]; then
            echo "‚ùå Build verification failed"
            exit 1
          fi
          
          echo "‚úÖ All checks passed! Ready for merge."