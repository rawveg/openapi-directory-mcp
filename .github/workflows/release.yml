name: Release & NPM Publish

on:
  push:
    tags:
      - 'v*'

jobs:
  pre-release-validation:
    name: Pre-Release Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Get version from tag
        id: get-version
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️  Tag: $TAG"
          echo "📦 Version: $VERSION"
          
      - name: Verify version in package.json
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ steps.get-version.outputs.version }}" ]; then
            echo "❌ Version mismatch: package.json has $PACKAGE_VERSION but tag is ${{ steps.get-version.outputs.version }}"
            exit 1
          fi
          echo "✅ Version in package.json matches tag"
          
      - name: Check changelog entry
        run: |
          if [ -f "CHANGELOG.md" ]; then
            if grep -q "${{ steps.get-version.outputs.version }}" CHANGELOG.md; then
              echo "✅ Changelog entry found for version ${{ steps.get-version.outputs.version }}"
            else
              echo "⚠️  No changelog entry found for version ${{ steps.get-version.outputs.version }}"
            fi
          else
            echo "⚠️  No CHANGELOG.md file found"
          fi
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run validation suite
        run: |
          echo "🧪 Running validation checks..."
          npm run validate
          
      - name: Build project
        run: |
          npm run build
          chmod +x dist/index.js
        
      - name: Validate package contents
        run: |
          echo "📦 Validating package contents..."
          npm pack --dry-run
          
          # Check essential files exist
          if [ ! -f "dist/index.js" ]; then
            echo "❌ Missing dist/index.js"
            exit 1
          fi
          
          if [ ! -f "package.json" ]; then
            echo "❌ Missing package.json"
            exit 1
          fi
          
          if [ ! -f "README.md" ]; then
            echo "❌ Missing README.md"
            exit 1
          fi
          
          echo "✅ Package validation passed"

  build-and-package:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: pre-release-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Clean build
        run: |
          rm -rf dist
          npm run build
          chmod +x dist/index.js
          
      - name: Generate tarball preview
        run: |
          echo "📦 Creating package tarball..."
          npm pack
          
          TARBALL=$(ls *.tgz)
          echo "📦 Generated: $TARBALL"
          
          # List contents
          echo "📋 Package contents:"
          tar -tzf "$TARBALL" | head -20
          
          # Check size
          SIZE=$(stat -c%s "$TARBALL")
          echo "📊 Package size: $SIZE bytes"
          
          if [ "$SIZE" -gt 10000000 ]; then
            echo "⚠️  Package is quite large (>10MB)"
          fi
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ needs.pre-release-validation.outputs.version }}
          path: |
            dist/
            *.tgz
          retention-days: 30

  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-and-package]
    environment: npm-production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build for production
        run: |
          npm run build
          chmod +x dist/index.js
          
      - name: Verify NPM authentication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm whoami
          echo "✅ NPM authentication verified"
          
      - name: Check if version already published
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🔍 Checking if version ${{ needs.pre-release-validation.outputs.version }} is already published..."
          
          if npm view openapi-directory-mcp@${{ needs.pre-release-validation.outputs.version }} version 2>/dev/null; then
            echo "✅ Version ${{ needs.pre-release-validation.outputs.version }} already exists on NPM"
            echo "ALREADY_PUBLISHED=true" >> $GITHUB_ENV
          else
            echo "📦 Version ${{ needs.pre-release-validation.outputs.version }} not found on NPM, proceeding with publish"
            echo "ALREADY_PUBLISHED=false" >> $GITHUB_ENV
          fi
          
      - name: Publish to NPM
        if: env.ALREADY_PUBLISHED == 'false'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "🚀 Publishing to NPM..."
          
          # Check if this is a prerelease
          if [[ "${{ needs.pre-release-validation.outputs.version }}" == *"beta"* ]] || \
             [[ "${{ needs.pre-release-validation.outputs.version }}" == *"alpha"* ]] || \
             [[ "${{ needs.pre-release-validation.outputs.version }}" == *"rc"* ]]; then
            echo "📦 Publishing prerelease version with beta tag..."
            npm publish --tag beta
          else
            echo "📦 Publishing stable version with latest tag..."
            npm publish
          fi
          
          echo "✅ Successfully published to NPM"
          
      - name: Skip NPM publish
        if: env.ALREADY_PUBLISHED == 'true'
        run: |
          echo "⏭️  Skipping NPM publish - version ${{ needs.pre-release-validation.outputs.version }} already exists"
          echo "✅ NPM publish step completed (already published)"
          
      - name: Verify publication
        run: |
          echo "🔍 Verifying publication..."
          
          # Wait a moment for NPM to update
          sleep 10
          
          # Check that the specific version is available
          if npm view openapi-directory-mcp@${{ needs.pre-release-validation.outputs.version }} version 2>/dev/null; then
            NPM_VERSION=$(npm view openapi-directory-mcp@${{ needs.pre-release-validation.outputs.version }} version)
            echo "✅ Version ${{ needs.pre-release-validation.outputs.version }} successfully published"
            echo "📦 Confirmed NPM version: $NPM_VERSION"
          else
            echo "❌ Version ${{ needs.pre-release-validation.outputs.version }} not found on NPM"
            echo "🔍 Available versions:"
            npm view openapi-directory-mcp versions --json | jq -r '.[-5:][]' 2>/dev/null || echo "Could not fetch version list"
            exit 1
          fi
          
      - name: Test installation
        run: |
          echo "🧪 Testing NPM installation..."
          
          # Create test directory
          mkdir npm-install-test
          cd npm-install-test
          
          # Test installation
          npm init -y
          npm install openapi-directory-mcp@${{ needs.pre-release-validation.outputs.version }}
          
          # Test CLI
          timeout 5s npx openapi-directory-mcp --help || echo "CLI started successfully"
          
          echo "✅ NPM installation test passed"

  update-github-release:
    name: Update GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, npm-publish]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ needs.pre-release-validation.outputs.version }}
          path: ./artifacts
          
      - name: Generate release notes
        id: release-notes
        run: |
          echo "📝 Generating release notes..."
          
          # Get previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "📊 Changes since $PREVIOUS_TAG:"
            
            # Generate changelog from commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
            
            # Create release notes
            cat > release-notes.md << EOF
          ## What's Changed
          
          $CHANGELOG
          
          ## Installation
          
          \`\`\`bash
          npm install -g openapi-directory-mcp@${{ needs.pre-release-validation.outputs.version }}
          \`\`\`
          
          ## Verification
          
          ✅ Package published to NPM: https://www.npmjs.com/package/openapi-directory-mcp/v/${{ needs.pre-release-validation.outputs.version }}
          ✅ All validation checks passed
          ✅ Security scan completed
          ✅ Plugin architecture validated
          
          **Full Changelog**: https://github.com/rawveg/openapi-directory-mcp/compare/$PREVIOUS_TAG...${{ needs.pre-release-validation.outputs.tag }}
          EOF
          
          else
            echo "🎉 Initial release"
            cat > release-notes.md << EOF
          ## 🎉 Initial Release
          
          This is the first release of the OpenAPI Directory MCP server with plugin architecture.
          
          ## Installation
          
          \`\`\`bash
          npm install -g openapi-directory-mcp@${{ needs.pre-release-validation.outputs.version }}
          \`\`\`
          
          ## Features
          
          - 📦 22 built-in tools for API discovery and management
          - 🧩 25+ intelligent prompts for API integration
          - 🔧 Plugin architecture for zero-touch extensibility
          - ⚡ Dual-source API data (APIs.guru + enhanced dataset)
          - 💾 Intelligent caching for performance
          - 🔒 Type-safe with full TypeScript support
          
          See the [README](https://github.com/rawveg/openapi-directory-mcp/blob/main/README.md) for full documentation.
          EOF
          fi
          
      - name: Update existing release
        run: |
          echo "📝 Updating existing GitHub release with NPM publication info..."
          
          # Get release ID
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ needs.pre-release-validation.outputs.tag }}" \
            | jq -r '.id')
          
          if [ "$RELEASE_ID" = "null" ] || [ -z "$RELEASE_ID" ]; then
            echo "⚠️  Release not found for tag ${{ needs.pre-release-validation.outputs.tag }}"
            echo "📝 Creating release since it doesn't exist..."
            
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/releases" \
              -d "{
                \"tag_name\": \"${{ needs.pre-release-validation.outputs.tag }}\",
                \"name\": \"Release ${{ needs.pre-release-validation.outputs.tag }}\",
                \"body\": $(jq -Rs . < release-notes.md),
                \"draft\": false,
                \"prerelease\": ${{ contains(needs.pre-release-validation.outputs.version, 'beta') || contains(needs.pre-release-validation.outputs.version, 'alpha') || contains(needs.pre-release-validation.outputs.version, 'rc') }}
              }"
          else
            echo "✅ Found existing release (ID: $RELEASE_ID)"
            echo "📝 Updating release with NPM publication confirmation..."
            
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID" \
              -d "{
                \"body\": $(jq -Rs . < release-notes.md)
              }"
          fi

